适配器模式:
        优点：

        　　　　1：将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，无需修改原有结构。

        　　　　2：增加了类的透明性和复用性，将具体的业务实现过程封装在适配者类中，对于客户端类而言是透明的，而且提高了适配者的复用性，同一适配者类可以在多个不同的系统中复用。

        　　　　3：灵活性和扩展性都非常好，通过使用配置文件，可以很方便的更换适配器，也可以在不修改原有代码的基础上 增加新的适配器，完全复合开闭原则。

        　　缺点：

        　　　　1：一次最多只能适配一个适配者类，不能同时适配多个适配者。

        　　　　2：适配者类不能为最终类

        　　　　3：目标抽象类只能为接口，不能为类，其使用有一定的局限性。


        适配器模式与装饰器模式的区别
        装饰器与适配器都有一个别名叫做 包装模式(Wrapper)，它们看似都是起到包装一个类或对象的作用，但是使用它们的目的很不一一样。适配器模式的意义是要将一个接口转变成另一个接口，它的目的是通过改变接口来达到重复使用的目的。
        而装饰器模式不是要改变被装饰对象的接口，而是恰恰要保持原有的接口，但是增强原有对象的功能，或者改变原有对象的处理方式而提升性能。所以这两个模式设计的目的是不同的。

    例子:InPutStreamReader和OutPutStreamWriter

    适用场景
    1，系统需要使用现有的类，但现有的类却不兼容。
    2，需要建立一个可以重复使用的类，用于一些彼此关系不大的类，并易于扩展，以便于面对将来会出现的类。
    3，需要一个统一的输出接口，但是输入类型却不可预知。